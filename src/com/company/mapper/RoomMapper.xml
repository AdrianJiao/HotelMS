<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.mapper.RoomMapper">
  <resultMap id="BaseResultMap" type="com.company.bean.Room">
    <id column="roomNumber" jdbcType="VARCHAR" property="roomNumber" />
    <result column="roomStateID" jdbcType="VARCHAR" property="roomStateID" />
    <result column="roomAmount" jdbcType="INTEGER" property="roomAmount" />
    <result column="guestRoomLevelID" jdbcType="VARCHAR" property="guestRoomLevelID" />
    <result column="standardPriceDay" jdbcType="DOUBLE" property="standardPriceDay" />
    <result column="standardPrice" jdbcType="DOUBLE" property="standardPrice" />
    <result column="maxDuration" jdbcType="DOUBLE" property="maxDuration" />
    <result column="firstPrice" jdbcType="DOUBLE" property="firstPrice" />
    <result column="firstDuration" jdbcType="DOUBLE" property="firstDuration" />
  </resultMap>
  <sql id="Base_Column_List">
    roomNumber, roomStateID, roomAmount, guestRoomLevelID, standardPriceDay, standardPrice, 
    maxDuration, firstPrice, firstDuration
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from room
    where roomNumber = #{roomNumber,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from room
    where roomNumber = #{roomNumber,jdbcType=VARCHAR}
  </delete>
  <!--增加房间-->
  <insert id="insert" parameterType="com.company.bean.Room">
    insert into room (roomNumber, roomStateID, roomAmount, 
      guestRoomLevelID, standardPriceDay, standardPrice, 
      maxDuration, firstPrice, firstDuration
      )
    values (#{roomNumber,jdbcType=VARCHAR}, #{roomStateID,jdbcType=VARCHAR}, #{roomAmount,jdbcType=INTEGER}, 
      #{guestRoomLevelID,jdbcType=VARCHAR}, #{standardPriceDay,jdbcType=DOUBLE}, #{standardPrice,jdbcType=DOUBLE}, 
      #{maxDuration,jdbcType=DOUBLE}, #{firstPrice,jdbcType=DOUBLE}, #{firstDuration,jdbcType=DOUBLE}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.company.bean.Room">
    insert into room
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roomNumber != null">
        roomNumber,
      </if>
      <if test="roomStateID != null">
        roomStateID,
      </if>
      <if test="roomAmount != null">
        roomAmount,
      </if>
      <if test="guestRoomLevelID != null">
        guestRoomLevelID,
      </if>
      <if test="standardPriceDay != null">
        standardPriceDay,
      </if>
      <if test="standardPrice != null">
        standardPrice,
      </if>
      <if test="maxDuration != null">
        maxDuration,
      </if>
      <if test="firstPrice != null">
        firstPrice,
      </if>
      <if test="firstDuration != null">
        firstDuration,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roomNumber != null">
        #{roomNumber,jdbcType=VARCHAR},
      </if>
      <if test="roomStateID != null">
        #{roomStateID,jdbcType=VARCHAR},
      </if>
      <if test="roomAmount != null">
        #{roomAmount,jdbcType=INTEGER},
      </if>
      <if test="guestRoomLevelID != null">
        #{guestRoomLevelID,jdbcType=VARCHAR},
      </if>
      <if test="standardPriceDay != null">
        #{standardPriceDay,jdbcType=DOUBLE},
      </if>
      <if test="standardPrice != null">
        #{standardPrice,jdbcType=DOUBLE},
      </if>
      <if test="maxDuration != null">
        #{maxDuration,jdbcType=DOUBLE},
      </if>
      <if test="firstPrice != null">
        #{firstPrice,jdbcType=DOUBLE},
      </if>
      <if test="firstDuration != null">
        #{firstDuration,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.company.bean.Room">
    update room
    <set>
      <if test="roomStateID != null">
        roomStateID = #{roomStateID,jdbcType=VARCHAR},
      </if>
      <if test="roomAmount != null">
        roomAmount = #{roomAmount,jdbcType=INTEGER},
      </if>
      <if test="guestRoomLevelID != null">
        guestRoomLevelID = #{guestRoomLevelID,jdbcType=VARCHAR},
      </if>
      <if test="standardPriceDay != null">
        standardPriceDay = #{standardPriceDay,jdbcType=DOUBLE},
      </if>
      <if test="standardPrice != null">
        standardPrice = #{standardPrice,jdbcType=DOUBLE},
      </if>
      <if test="maxDuration != null">
        maxDuration = #{maxDuration,jdbcType=DOUBLE},
      </if>
      <if test="firstPrice != null">
        firstPrice = #{firstPrice,jdbcType=DOUBLE},
      </if>
      <if test="firstDuration != null">
        firstDuration = #{firstDuration,jdbcType=DOUBLE},
      </if>
    </set>
    where roomNumber = #{roomNumber,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.company.bean.Room">
    update room
    set roomStateID = #{roomStateID,jdbcType=VARCHAR},
      roomAmount = #{roomAmount,jdbcType=INTEGER},
      guestRoomLevelID = #{guestRoomLevelID,jdbcType=VARCHAR},
      standardPriceDay = #{standardPriceDay,jdbcType=DOUBLE},
      standardPrice = #{standardPrice,jdbcType=DOUBLE},
      maxDuration = #{maxDuration,jdbcType=DOUBLE},
      firstPrice = #{firstPrice,jdbcType=DOUBLE},
      firstDuration = #{firstDuration,jdbcType=DOUBLE}
    where roomNumber = #{roomNumber,jdbcType=VARCHAR}
  </update>




<!--*************************新增分隔线********************************-->
  <!--/根据房间号查询房间信息-->
  <select id="queryRoomByRoomNumber" parameterType="string" resultType="room">
    select * from
    (select * from room as temp
    left outer join
    (select  attributeDetailsName as guestRoomLevelName,far_id from attributevalue) as tempa
    on temp.guestRoomLevelID = tempa.far_id ) as tempb
    left outer join
    (select  attributeDetailsName as roomName,far_id from attributevalue) as tempc
    on tempb.roomStateID = tempc.far_id
    WHERE tempb.roomNumber = #{roomNumber}
  </select>


  <!--分页查询-->
  <select id="queryPartRoom" parameterType="hashmap" resultType="room">
    select * from
    (select * from room as temp
    left outer join
    (select  attributeDetailsName as guestRoomLevelName,far_id from attributevalue) as tempa
    on temp.guestRoomLevelID = tempa.far_id ) as tempb
    left outer join
    (select  attributeDetailsName as roomName,far_id from attributevalue) as tempc
    on tempb.roomStateID = tempc.far_id
    <where>
      <if test="txtname != null and !txtname.isEmpty()">
        tempb.roomNumber like #{txtname}
      </if>
    </where>
    limit #{limit} offset #{offset};
  </select>

  <!--/查询list为总记录数-->
  <select id="countToatalRoomRecorders" resultType="int">
    select count(*) from room;
  </select>

  <!--  根据房间号查询记录数-->
  <select id="countRoomRecordersByRoomNumber" parameterType="string" resultType="int">
    select  count(*) from room
    <where>
      <if test="_parameter != null and ! _parameter.isEmpty()">
        roomNumber like #{txtname}
      </if>
    </where>
  </select>

  <!--批量删除-->
  <delete id="deleteBatchByRoom" >
    delete from room
    <where>
      <foreach collection="array" item="roomNumber">
        or roomNumber = #{roomNumber}
      </foreach>
    </where>
  </delete>

  <!--查询房间状态为空房的所有房间-->
  <select id="queryAllEmptyRoom" resultType="room">
     select * from
    (select * from room as temp
    left outer join
    (select  attributeDetailsName as guestRoomLevelName,far_id from attributevalue) as tempa
    on temp.guestRoomLevelID = tempa.far_id ) as tempb
    left outer join
    (select  attributeDetailsName as roomName,far_id from attributevalue) as tempc
    on tempb.roomStateID = tempc.far_id
    where tempb.roomStateID = (
       select  far_id from attributevalue where attributeDetailsName ='空房'
    )
  </select>

  <!--查询所有房间信息-->
  <select id="queryAllRoom" resultType="room">
    select * from
    (select * from room as temp
    left outer join
    (select  attributeDetailsName as guestRoomLevelName,far_id from attributevalue) as tempa
    on temp.guestRoomLevelID = tempa.far_id ) as tempb
    left outer join
    (select  attributeDetailsName as roomName,far_id from attributevalue) as tempc
    on tempb.roomStateID = tempc.far_id
  </select>

  <!--根据房间号查询所有房间-->
  <select id="queryAllRoomByRoomNumber" parameterType="string" resultType="room">
    select * from
    (select * from room as temp
    left outer join
    (select  attributeDetailsName as guestRoomLevelName,far_id from attributevalue) as tempa
    on temp.guestRoomLevelID = tempa.far_id ) as tempb
    left outer join
    (select  attributeDetailsName as roomName,far_id from attributevalue) as tempc
    on tempb.roomStateID = tempc.far_id
    <where>
      <if test="_parameter != null and !_parameter.isEmpty()">
        tempb.roomNumber like #{roomName}
      </if>
    </where>
  </select>

  <!--根据房间等级来查询房间-->
  <select id="queryRoomByGuestRoomLevel" parameterType="Integer" resultType="room">
    SELECT * FROM room WHERE guestRoomLevelID = #{guestRoomLevelID};
  </select>
</mapper>